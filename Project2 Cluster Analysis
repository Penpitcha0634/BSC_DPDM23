{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1JVwyWMrCp19kJwELDYWBFOLM3mbMaSt_",
      "authorship_tag": "ABX9TyMNk6UEQtmjLayVrSbJOBcN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Penpitcha0634/BSC_DPDM23/blob/main/Project2%20Cluster%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Tzqmct_CFT-a"
      },
      "outputs": [],
      "source": [
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from scipy.cluster.hierarchy import linkage, fcluster, dendrogram\n",
        "from sklearn.metrics import silhouette_samples, silhouette_score\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "dd8PQxs1JnV-"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IThB66pLJwj_",
        "outputId": "ebfedc6f-83ec-4063-ca89-43ebf277c014"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "file_path = '/content/drive/MyDrive/seminar & project /Project/project2/Data Set ตัวแปรและปัจจัยมลพิษทางอากาศ .xlsx'# ระบุเส้นทางของไฟล์ Excel\n",
        "sheet_name = 'มลพิษของแท้'# ระบุชื่อ Sheet ที่ต้องการ\n",
        "#อ่านข้อมูลไฟล์จาก Excel\n",
        "Air_pollution = pd.read_excel(file_path, sheet_name=sheet_name)\n",
        "# แสดงข้อมูล\n",
        "print(Air_pollution.head())"
      ],
      "metadata": {
        "id": "zG__R8SDRE74",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b928980-9022-41e7-b8df-0487b190b24e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       จังหวัด SO2 NO2    CO  O3 PM10 PM2.5  จำนวน\\nโรงงาน  \\\n",
            "0       กระบี่   -   -     -   -    0     -           2163   \n",
            "1    กาญจนบุรี   0   4     -  36   41    15           6306   \n",
            "2    กาฬสินธุ์   -   -     -   -    -     -           5599   \n",
            "3  \\tกำแพงเพชร   1   6  0.43  18   25    13           3307   \n",
            "4    \\tขอนแก่น   -   -     -   -   48    28          11674   \n",
            "\n",
            "   ปริมาณกาก\\nของเสีย  จำนวน\\nครัวเรือน  ... ฤดูฝน ฤดูหนาว  \\\n",
            "0              213.02            201080  ...  27.6      27   \n",
            "1           605710.18            359348  ...  28.3    26.4   \n",
            "2           903434.95            322190  ...  28.2      25   \n",
            "3            76728.47            285190  ...  28.4    26.1   \n",
            "4           118002.81            668539  ...  28.2    25.1   \n",
            "\n",
            "  ปริมาณการใช้\\nไฟฟ้าครัวเรือน ปริมาณการใช้\\nไฟฟ้ากิจการ  \\\n",
            "0                    346833979                 480646937   \n",
            "1                    645373570                1332767206   \n",
            "2                    383804304                 453890163   \n",
            "3                    396833854                 658647531   \n",
            "4                    996720930                1553089742   \n",
            "\n",
            "  ปริมาณน้ำมันที่ใช้\\nกับยานพาหนะ จำนวนรถตาม\\nกฎหมายรถยนต์  \\\n",
            "0                       211316.80                  1265888   \n",
            "1                       389608.80                  1974241   \n",
            "2                       180626.15                  1487255   \n",
            "3                       194569.75                  1783491   \n",
            "4                       828250.69                  4375122   \n",
            "\n",
            "   จำนวนรถตาม\\nกฎหมายขนส่งทางบก  ปริมาณขยะมูลฝอย\\nที่เกิดขึ้น  \\\n",
            "0                         37108                           495   \n",
            "1                         99541                           657   \n",
            "2                         66852                           735   \n",
            "3                         97924                           514   \n",
            "4                        151909                          1348   \n",
            "\n",
            "   ปริมาณขยะมูลฝอย\\nตกค้าง  ปริมาณพื้นที่\\nสีเขียว  \n",
            "0                    58280                   10.78  \n",
            "1                   109475                  525.13  \n",
            "2                    90050                   42.18  \n",
            "3                    20000                   11.34  \n",
            "4                   618640                 1403.73  \n",
            "\n",
            "[5 rows x 22 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# แปลง '-' เป็น NaN\n",
        "Air_pollution.replace('-', np.nan, inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mRFwPypjNptg",
        "outputId": "51acd3e8-b446-4032-bf73-63eb4c5a0844"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-22-9edae9f4418d>:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
            "  Air_pollution.replace('-', np.nan, inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ตรวจสอบชื่อคอลัมน์\n",
        "print(Air_pollution.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RJ_7P6PFMNTg",
        "outputId": "1cc02a9a-9b31-487c-912a-fa9099a9cf11"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['จังหวัด', 'SO2', 'NO2', 'CO', 'O3', 'PM10', 'PM2.5', 'จำนวน\\nโรงงาน',\n",
            "       'ปริมาณกาก\\nของเสีย', 'จำนวน\\nครัวเรือน', 'อุณหภูมิ', 'ฤดูร้อน',\n",
            "       'ฤดูฝน', 'ฤดูหนาว', 'ปริมาณการใช้\\nไฟฟ้าครัวเรือน',\n",
            "       'ปริมาณการใช้\\nไฟฟ้ากิจการ', 'ปริมาณน้ำมันที่ใช้\\nกับยานพาหนะ',\n",
            "       'จำนวนรถตาม\\nกฎหมายรถยนต์', 'จำนวนรถตาม\\nกฎหมายขนส่งทางบก',\n",
            "       'ปริมาณขยะมูลฝอย\\nที่เกิดขึ้น', 'ปริมาณขยะมูลฝอย\\nตกค้าง',\n",
            "       'ปริมาณพื้นที่\\nสีเขียว'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = Air_pollution[['SO2', 'NO2', 'CO', 'O3', 'PM10', 'PM2.5', 'จำนวน\\nโรงงาน',\n",
        "       'ปริมาณกาก\\nของเสีย', 'จำนวน\\nครัวเรือน', 'อุณหภูมิ', 'ฤดูร้อน',\n",
        "       'ฤดูฝน', 'ฤดูหนาว', 'ปริมาณการใช้\\nไฟฟ้าครัวเรือน',\n",
        "       'ปริมาณการใช้\\nไฟฟ้ากิจการ', 'ปริมาณน้ำมันที่ใช้\\nกับยานพาหนะ',\n",
        "       'จำนวนรถตาม\\nกฎหมายรถยนต์', 'จำนวนรถตาม\\nกฎหมายขนส่งทางบก',\n",
        "       'ปริมาณขยะมูลฝอย\\nที่เกิดขึ้น', 'ปริมาณขยะมูลฝอย\\nตกค้าง',\n",
        "       'ปริมาณพื้นที่\\nสีเขียว']].values"
      ],
      "metadata": {
        "id": "RYJXo4lVLkA5"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# การจัดกลุ่มแบบลำดับชั้น (Hierarchical Clustering)\n",
        "# สร้าง linkage matrix\n",
        "linkage_matrix = linkage(X, method='single')  # ใช้ Single Linkage\n"
      ],
      "metadata": {
        "id": "b5nfDFkdFnPB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "outputId": "4ed2de81-d9e9-41d4-a0d8-3ba02a7ef23a"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "The condensed distance matrix must contain only finite values.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-bc04458380c4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# การจัดกลุ่มแบบลำดับชั้น (Hierarchical Clustering)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# สร้าง linkage matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlinkage_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinkage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'single'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# ใช้ Single Linkage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/scipy/cluster/hierarchy.py\u001b[0m in \u001b[0;36mlinkage\u001b[0;34m(y, method, metric, optimal_ordering)\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1029\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1030\u001b[0;31m         raise ValueError(\"The condensed distance matrix must contain only \"\n\u001b[0m\u001b[1;32m   1031\u001b[0m                          \"finite values.\")\n\u001b[1;32m   1032\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: The condensed distance matrix must contain only finite values."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# กำหนดจำนวนกลุ่ม (สมมุติ 3 กลุ่ม)\n",
        "n_clusters = 3\n",
        "clusters = fcluster(linkage_matrix, n_clusters, criterion='maxclust')"
      ],
      "metadata": {
        "id": "h6U7HZSUFq3r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# คำนวณค่า Silhouette\n",
        "silhouette_vals = silhouette_samples(X, clusters)\n",
        "silhouette_avg = silhouette_score(X, clusters)"
      ],
      "metadata": {
        "id": "WZTsCBLqFvTb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# สร้างกราฟ Silhouette\n",
        "plt.figure(figsize=(8, 6))\n",
        "y_lower = 10\n",
        "for i in range(1, n_clusters + 1):\n",
        "    cluster_silhouette_vals = silhouette_vals[clusters == i]\n",
        "    cluster_silhouette_vals.sort()\n",
        "    y_upper = y_lower + len(cluster_silhouette_vals)\n",
        "    plt.fill_betweenx(np.arange(y_lower, y_upper), 0, cluster_silhouette_vals, alpha=0.7)\n",
        "    plt.text(-0.05, y_lower + 0.5 * len(cluster_silhouette_vals), f\"Cluster {i}\")\n",
        "    y_lower = y_upper + 10"
      ],
      "metadata": {
        "id": "yPV7YZ4qI94Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# เส้นค่าเฉลี่ย Silhouette\n",
        "plt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\", label=f\"Average Silhouette: {silhouette_avg:.2f}\")\n",
        "plt.title(\"Silhouette Plot for Hierarchical Clustering\")\n",
        "plt.xlabel(\"Silhouette Coefficient\")\n",
        "plt.ylabel(\"Cluster\")\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "awaXOt79I-uT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}